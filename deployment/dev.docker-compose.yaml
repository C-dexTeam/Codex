services:
  api:
    container_name: codex-api
    build:
      context: ../backend/.
      dockerfile: ../deployment/backend/dev.Dockerfile
    ports:
      - 8080:8080
    volumes:
      - ../backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - codex
  
  compiler-api:
    container_name: compiler-api
    build:
      context: ../compiler/.
      dockerfile: ../deployment/compiler/dev.Dockerfile
    ports:
      - 8081:8081
    volumes:
      - ../compiler:/app
    networks:
      - codex
  
  web3-api:
    container_name: web3-api
    build:
      context: ../web3/.
      dockerfile: ../deployment/web3/dev.Dockerfile
    ports:
      - "8082:8082"
    volumes:
      - ../web3:/app
    networks:
      - codex

  frontend:
    container_name: codex-frontend
    build:
      context: ../frontend/.
      dockerfile: ../deployment/frontend/dev.Dockerfile
    ports:
      - 9000:3000
    volumes:
      - ../frontend:/app
    networks:
      - codex

  database:
    container_name: codex-db
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
    volumes:
      - ../backend/storage/postgres_data:/var/lib/postgresql/data
      - ./backend/script:/docker-entrypoint-initdb.d
    networks:
      - codex

  redis:
    container_name: codex-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ../backend/storage/redis_data:/data
    networks:
      - codex

  nginx:
    image: nginx:latest
    container_name: codex-nginx
    restart: always
    volumes:
      - ./nginx:/etc/nginx/conf.d
    ports:
      - 80:80
      - 443:443
    networks:
      - codex

networks:
  codex:
    driver: bridge
