// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attribute.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteAttribute = `-- name: DeleteAttribute :exec
DELETE FROM
    t_attributes
WHERE
    id = $1
`

func (q *Queries) DeleteAttribute(ctx context.Context, attributeID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAttribute, attributeID)
	return err
}

const getAttributeByID = `-- name: GetAttributeByID :one
SELECT 
    a.id, a.reward_id, a.trait_type, a.value
FROM 
    t_attributes as a
WHERE
    id = $1
`

func (q *Queries) GetAttributeByID(ctx context.Context, attributeID uuid.UUID) (TAttribute, error) {
	row := q.db.QueryRowContext(ctx, getAttributeByID, attributeID)
	var i TAttribute
	err := row.Scan(
		&i.ID,
		&i.RewardID,
		&i.TraitType,
		&i.Value,
	)
	return i, err
}

const getAttributes = `-- name: GetAttributes :many
SELECT 
    a.id, a.reward_id, a.trait_type, a.value
FROM 
    t_attributes as a
WHERE
    ($1::UUID IS NULL OR a.id = $1::UUID) AND
    ($2::UUID IS NULL OR a.reward_id = $2::UUID) AND
    ($3::text IS NULL OR a.trait_type ILIKE '%' || $3::text || '%') AND
    ($4::text IS NULL OR a.value ILIKE '%' || $4::text || '%')
LIMIT $6 OFFSET $5
`

type GetAttributesParams struct {
	ID        uuid.NullUUID
	RewardID  uuid.NullUUID
	TraitType sql.NullString
	Value     sql.NullString
	Off       int32
	Lim       int32
}

func (q *Queries) GetAttributes(ctx context.Context, arg GetAttributesParams) ([]TAttribute, error) {
	rows, err := q.db.QueryContext(ctx, getAttributes,
		arg.ID,
		arg.RewardID,
		arg.TraitType,
		arg.Value,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TAttribute
	for rows.Next() {
		var i TAttribute
		if err := rows.Scan(
			&i.ID,
			&i.RewardID,
			&i.TraitType,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttribute = `-- name: UpdateAttribute :exec
UPDATE
    t_attributes
SET
    reward_id = COALESCE($1::TEXT, reward_id),
    trait_type = COALESCE($2::TEXT, trait_type),
    value = COALESCE($3::TEXT, value)
WHERE
    id = $4
`

type UpdateAttributeParams struct {
	RewardID    sql.NullString
	TraitType   sql.NullString
	Value       sql.NullString
	AttributeID uuid.UUID
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) error {
	_, err := q.db.ExecContext(ctx, updateAttribute,
		arg.RewardID,
		arg.TraitType,
		arg.Value,
		arg.AttributeID,
	)
	return err
}
