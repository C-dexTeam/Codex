// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package repo

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getRoleByID = `-- name: GetRoleByID :one
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    r.id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, roleID uuid.UUID) (TRole, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, roleID)
	var i TRole
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    r.name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, roleName string) (TRole, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, roleName)
	var i TRole
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT
    r.id, r.name
FROM 
    t_roles as r
WHERE
    ($1::text IS NULL OR us.id = $1) AND
    ($2::text IS NULL OR name ILIKE '%' || $2::text || '%')
LIMIT $4 OFFSET $3
`

type GetRolesParams struct {
	ID   sql.NullString
	Name sql.NullString
	Off  int32
	Lim  int32
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]TRole, error) {
	rows, err := q.db.QueryContext(ctx, getRoles,
		arg.ID,
		arg.Name,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TRole
	for rows.Next() {
		var i TRole
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
