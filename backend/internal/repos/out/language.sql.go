// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: language.sql

package repo

import (
	"context"
	"database/sql"
)

const getLanguages = `-- name: GetLanguages :many
SELECT
    l.id, l.value
FROM t_languages as l
WHERE
    ($1::text IS NULL OR us.id = $1) AND
    ($2::text IS NULL OR value ILIKE '%' || $2::text || '%')
LIMIT $4 OFFSET $3
`

type GetLanguagesParams struct {
	ID    sql.NullString
	Value sql.NullString
	Off   int32
	Lim   int32
}

func (q *Queries) GetLanguages(ctx context.Context, arg GetLanguagesParams) ([]TLanguage, error) {
	rows, err := q.db.QueryContext(ctx, getLanguages,
		arg.ID,
		arg.Value,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TLanguage
	for rows.Next() {
		var i TLanguage
		if err := rows.Scan(&i.ID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
