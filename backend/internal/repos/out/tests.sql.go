// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tests.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createTest = `-- name: CreateTest :exec
BEGIN
`

func (q *Queries) CreateTest(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createTest)
	return err
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM 
    t_tests
WHERE 
    id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, testID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTest, testID)
	return err
}

const getTestByID = `-- name: GetTestByID :one
SELECT
    t.id, i.value, o.value
FROM 
    t_tests AS t
INNER JOIN
    t_inputs i
ON i.test_id = t.id
INNER JOIN 
    t_outputs o
ON o.test_id = t.id
WHERE
    t.id = $1
`

type GetTestByIDRow struct {
	ID      uuid.UUID
	Value   string
	Value_2 string
}

func (q *Queries) GetTestByID(ctx context.Context, testID uuid.UUID) (GetTestByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTestByID, testID)
	var i GetTestByIDRow
	err := row.Scan(&i.ID, &i.Value, &i.Value_2)
	return i, err
}

const getTests = `-- name: GetTests :many
SELECT
    t.id, i.value, o.value
FROM 
    t_tests AS t
INNER JOIN
    t_inputs i
ON i.test_id = t.id
INNER JOIN 
    t_outputs o
ON o.test_id = t.id
WHERE
    ($1::UUID IS NULL OR t.id = $1::UUID) AND
    ($2::UUID IS NULL OR t.chapter_id = $2::UUID)
LIMIT $4 OFFSET $3
`

type GetTestsParams struct {
	ID        uuid.NullUUID
	ChapterID uuid.NullUUID
	Off       int32
	Lim       int32
}

type GetTestsRow struct {
	ID      uuid.UUID
	Value   string
	Value_2 string
}

func (q *Queries) GetTests(ctx context.Context, arg GetTestsParams) ([]GetTestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTests,
		arg.ID,
		arg.ChapterID,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTestsRow
	for rows.Next() {
		var i GetTestsRow
		if err := rows.Scan(&i.ID, &i.Value, &i.Value_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
