basePath: /api/v1
definitions:
  dto.AddAttributeDTO:
    properties:
      rewardID:
        type: string
      traitType:
        maxLength: 30
        type: string
      value:
        maxLength: 30
        type: string
    required:
    - rewardID
    - traitType
    - value
    type: object
  dto.AddChapterDTO:
    properties:
      content:
        type: string
      courseID:
        type: string
      description:
        type: string
      dockerTemplate:
        type: string
      frontendTemplate:
        type: string
      funcName:
        type: string
      languageID:
        type: string
      order:
        type: integer
      rewardID:
        type: string
      title:
        type: string
    type: object
  dto.AddPLanguageDTO:
    properties:
      description:
        type: string
      fileExtention:
        maxLength: 30
        type: string
      languageID:
        type: string
      monacoEditor:
        maxLength: 30
        type: string
      name:
        maxLength: 30
        type: string
    required:
    - fileExtention
    - monacoEditor
    - name
    type: object
  dto.AddTestDTO:
    properties:
      chapterID:
        type: string
      inputValue:
        type: string
      outputValue:
        type: string
    required:
    - chapterID
    type: object
  dto.RunChapter:
    properties:
      chapterID:
        type: string
      courseID:
        type: string
      userCode:
        type: string
    required:
    - chapterID
    - courseID
    type: object
  dto.StartCourseDTO:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  dto.UpdateAttributeDTO:
    properties:
      id:
        type: string
      rewardID:
        type: string
      traitType:
        type: string
      value:
        type: string
    type: object
  dto.UpdateChapterDTO:
    properties:
      content:
        type: string
      courseID:
        type: string
      description:
        type: string
      dockerTemplate:
        type: string
      frontendTemplate:
        type: string
      funcName:
        type: string
      id:
        type: string
      languageID:
        type: string
      order:
        type: integer
      rewardID:
        type: string
      title:
        type: string
    type: object
  dto.UpdatePLanguageDTO:
    properties:
      description:
        type: string
      fileExtention:
        type: string
      id:
        type: string
      languageID:
        type: string
      monacoEditor:
        type: string
      name:
        type: string
    type: object
  dto.UpdateTestDTO:
    properties:
      id:
        type: string
      inputValue:
        type: string
      outputValue:
        type: string
    required:
    - id
    type: object
  dto.UserAuthWallet:
    properties:
      message:
        type: string
      publicKeyBase58:
        type: string
      signatureBase58:
        type: string
    required:
    - message
    - publicKeyBase58
    - signatureBase58
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.UserProfileUpdateDTO:
    properties:
      name:
        maxLength: 30
        type: string
      surname:
        maxLength: 30
        type: string
    type: object
  dto.UserRegisterDTO:
    properties:
      ConfirmPassword:
        minLength: 8
        type: string
      email:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
      surname:
        maxLength: 60
        minLength: 3
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - ConfirmPassword
    - email
    - name
    - password
    - surname
    - username
    type: object
  response.BaseResponse:
    properties:
      data: {}
      dataCount:
        type: integer
      errors: {}
      message:
        type: string
      statusCode:
        type: integer
    type: object
host: localhost
info:
  contact: {}
  description: API Service for Codex
  title: API Service
paths:
  /admin/attributes/:
    patch:
      consumes:
      - application/json
      description: Updates Attribute Into DB.
      parameters:
      - description: Update Attribute
        in: body
        name: updateAttribute
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAttributeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Attribute
      tags:
      - Attributes
    post:
      consumes:
      - application/json
      description: Adds Attribute Into DB.
      parameters:
      - description: New Attribute
        in: body
        name: newAttribute
        required: true
        schema:
          $ref: '#/definitions/dto.AddAttributeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Attribute
      tags:
      - Attributes
  /admin/attributes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an Attribute by ID.
      parameters:
      - description: Attribute ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Attribute
      tags:
      - Attributes
  /admin/chapters/:
    patch:
      consumes:
      - application/json
      description: Updates Chapter Into DB.
      parameters:
      - description: Update Chapters
        in: body
        name: updateChapter
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateChapterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Chapter
      tags:
      - Chapters
    post:
      consumes:
      - application/json
      description: Adds Chapter Into DB.
      parameters:
      - description: New Chapter
        in: body
        name: newChapter
        required: true
        schema:
          $ref: '#/definitions/dto.AddChapterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Chapter
      tags:
      - Chapters
  /admin/chapters/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Chapters from DB.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Chapter
      tags:
      - Chapters
  /admin/courses/:
    patch:
      consumes:
      - multipart/form-data
      description: Updates Course Into DB.
      parameters:
      - description: Course Image File
        in: formData
        name: imageFile
        required: true
        type: file
      - in: formData
        name: description
        type: string
      - in: formData
        name: id
        type: string
      - in: formData
        name: languageID
        type: string
      - in: formData
        name: programmingLanguageID
        type: string
      - in: formData
        name: rewardID
        type: string
      - in: formData
        maxLength: 60
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Course
      tags:
      - Courses
    post:
      consumes:
      - multipart/form-data
      description: Adds Course Into DB.
      parameters:
      - description: Course Image File
        in: formData
        name: imageFile
        required: true
        type: file
      - in: formData
        name: description
        type: string
      - in: formData
        name: languageID
        type: string
      - in: formData
        name: programmingLanguageID
        required: true
        type: string
      - in: formData
        name: rewardID
        type: string
      - in: formData
        maxLength: 60
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Course
      tags:
      - Courses
  /admin/courses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Courses from DB.
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Course
      tags:
      - Courses
  /admin/planguages/:
    patch:
      consumes:
      - application/json
      description: Updates Programming Language Into DB.
      parameters:
      - description: Update Programming Language
        in: body
        name: updatePLanguage
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePLanguageDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Programming Language
      tags:
      - Programming Language
    post:
      consumes:
      - application/json
      description: Adds Programming Language Into DB.
      parameters:
      - description: New Programming Language
        in: body
        name: newPLanguage
        required: true
        schema:
          $ref: '#/definitions/dto.AddPLanguageDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Programming Language
      tags:
      - Programming Language
  /admin/planguages/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Programming Languages from DB.
      parameters:
      - description: Programming Language ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Programming Language
      tags:
      - Programming Language
  /admin/rewards/:
    patch:
      consumes:
      - application/json
      description: Updates Reward Into DB.
      parameters:
      - in: formData
        name: Description
        type: string
      - in: formData
        name: id
        required: true
        type: string
      - in: formData
        maxLength: 30
        name: name
        type: string
      - in: formData
        maxLength: 30
        name: symbol
        type: string
      - description: Course Image File
        in: formData
        name: imageFile
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Reward
      tags:
      - Reward
    post:
      consumes:
      - application/json
      description: Adds Reward Into DB.
      parameters:
      - description: Reward Image File
        in: formData
        name: imageFile
        required: true
        type: file
      - in: formData
        name: Description
        type: string
      - in: formData
        maxLength: 30
        name: name
        required: true
        type: string
      - in: formData
        name: sellerFee
        type: integer
      - in: formData
        maxLength: 30
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Reward
      tags:
      - Reward
  /admin/rewards/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Rewards from DB.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Reward
      tags:
      - Reward
  /admin/tests/:
    patch:
      consumes:
      - application/json
      description: Updates tests Into DB.
      parameters:
      - description: Update Test
        in: body
        name: updateTest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Test
      tags:
      - Test
    post:
      consumes:
      - application/json
      description: Adds Test Into DB.
      parameters:
      - description: New Test
        in: body
        name: newTest
        required: true
        schema:
          $ref: '#/definitions/dto.AddTestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Test
      tags:
      - Test
  /admin/tests/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tests from DB.
      parameters:
      - description: Taest ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Test
      tags:
      - Test
  /admin/user:
    get:
      consumes:
      - application/json
      description: Retrieves all users based on the provided query parameters.
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: User's Email
        in: query
        name: email
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Users
      tags:
      - User
  /private/attributes/:
    get:
      consumes:
      - application/json
      description: Retrieves all attribute based on the provided query parameters.
      parameters:
      - description: Attribute ID
        in: query
        name: id
        type: string
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: TraitType of Attribute
        in: query
        name: traitType
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Attributes
      tags:
      - Attributes
  /private/attributes/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves spesific Attribute based on the provided query parameters.
      parameters:
      - description: Attribute ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get One Attribute
      tags:
      - Attributes
  /private/chapters/:
    get:
      consumes:
      - application/json
      description: Retrieves all chapters based on the provided query parameters.
      parameters:
      - description: Chapter ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Course ID
        in: query
        name: courseID
        type: string
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: Chapter Title
        in: query
        name: title
        type: string
      - description: Grants Experience
        in: query
        name: grantsExp
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Chapters
      tags:
      - Chapters
  /private/chapters/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves spesific chapters based on the provided query parameters.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get One Chapter
      tags:
      - Chapters
  /private/chapters/compilerNames:
    get:
      consumes:
      - application/json
      description: Gets Programming Names
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Gets Programming Names
      tags:
      - Codex-Compiler
  /private/chapters/run:
    post:
      consumes:
      - application/json
      description: Runs Chapter Code.
      parameters:
      - description: Runs Chapter's Code
        in: body
        name: runChapter
        required: true
        schema:
          $ref: '#/definitions/dto.RunChapter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Run Chapter
      tags:
      - Chapters
  /private/compiler/template:
    post:
      consumes:
      - application/json
      description: This is a template for an endpoint created to make requests to
        Codex-Compiler.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Run Template
      tags:
      - Codex-Compiler
  /private/courses/:
    get:
      consumes:
      - application/json
      description: Retrieves all courses based on the provided query parameters.
      parameters:
      - description: Course ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language ID
        in: query
        name: pLanguageID
        type: string
      - description: Course Title
        in: query
        name: title
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Courses
      tags:
      - Courses
  /private/courses/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one course.
      parameters:
      - description: Course ID
        in: path
        name: id
        type: string
      - description: Chapter Page
        in: query
        name: page
        type: string
      - description: Chapter Attribute Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Course By ID
      tags:
      - Courses
  /private/courses/popular:
    get:
      consumes:
      - application/json
      description: Retrieves all popular courses.
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Popular Courses
      tags:
      - Courses
  /private/courses/start:
    post:
      consumes:
      - application/json
      description: Starts the spesific course.
      parameters:
      - description: Start Course
        in: body
        name: startCourse
        required: true
        schema:
          $ref: '#/definitions/dto.StartCourseDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Starts Course
      tags:
      - Courses
  /private/language/:
    get:
      consumes:
      - application/json
      description: Retrieves all languages based on the provided query parameters.
      parameters:
      - description: Language ID
        in: query
        name: id
        type: string
      - description: Value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Languages
      tags:
      - Language
  /private/planguages/:
    get:
      consumes:
      - application/json
      description: Retrieves all Programming languages based on the provided query
        parameters.
      parameters:
      - description: Programming Language ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Programming Languages
      tags:
      - Programming Language
  /private/planguages/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves spesific Programming languages based on the provided
        query parameters.
      parameters:
      - description: Programming Language ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get One Programming Language By ID
      tags:
      - Programming Language
  /private/rewards/:
    get:
      consumes:
      - application/json
      description: Retrieves all rewards based on the provided query parameters.
      parameters:
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: Reward Name
        in: query
        name: name
        type: string
      - description: Reward Symbol
        in: query
        name: symbol
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Rewards
      tags:
      - Reward
  /private/rewards/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one reward.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      - description: Reward Attribute Page
        in: query
        name: page
        type: string
      - description: Reward Attribute Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Reward By ID
      tags:
      - Reward
  /private/tests/:
    get:
      consumes:
      - application/json
      description: Retrieves all tests based on the provided query parameters.
      parameters:
      - description: Test ID
        in: query
        name: id
        type: string
      - description: Chapter ID
        in: query
        name: chapterID
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All tests
      tags:
      - Test
  /private/user/connect:
    post:
      consumes:
      - application/json
      description: Connects Wallet.
      parameters:
      - description: New User Wallet
        in: body
        name: newWallet
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthWallet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Connect Wallet To User
      tags:
      - User
  /private/user/mint/{rewardID}:
    post:
      consumes:
      - application/json
      description: Mint your NFT.
      parameters:
      - description: Reward ID
        in: path
        name: rewardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Mint NFT
      tags:
      - User
  /private/user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves users profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get User Profile
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Updates users profile.
      parameters:
      - description: New User Profile
        in: body
        name: newUserProfile
        required: true
        schema:
          $ref: '#/definitions/dto.UserProfileUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update User Profile
      tags:
      - User
  /private/user/streak:
    post:
      consumes:
      - application/json
      description: + your streak and gain exp.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Streak Up
      tags:
      - User
  /public/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - Auth
  /public/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Logout
      tags:
      - Auth
  /public/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Register
      tags:
      - Auth
  /public/rewards/metadata/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one reward.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Reward By ID
      tags:
      - Metadata
  /public/wallet:
    post:
      consumes:
      - application/json
      description: Auth Wallet
      parameters:
      - description: Wallet
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthWallet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Auth Wallet
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
