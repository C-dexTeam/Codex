basePath: /api/v1
definitions:
  dto.UserAuthWallet:
    properties:
      message:
        type: string
      publicKeyBase58:
        type: string
      signatureBase58:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.UserProfileUpdateDTO:
    properties:
      name:
        maxLength: 30
        type: string
      surname:
        maxLength: 30
        type: string
    type: object
  dto.UserRegisterDTO:
    properties:
      ConfirmPassword:
        minLength: 8
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - ConfirmPassword
    - email
    - password
    - username
    type: object
  response.BaseResponse:
    properties:
      data: {}
      dataCount:
        type: integer
      errors: {}
      message:
        type: string
      statusCode:
        type: integer
    type: object
host: localhost
info:
  contact: {}
  description: API Service for Codex
  title: API Service
paths:
  /private/admin/user:
    get:
      consumes:
      - application/json
      description: Retrieves all logs based on the provided query parameters.
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: User's Email
        in: query
        name: email
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Users
      tags:
      - Admin
  /private/courses/:
    get:
      consumes:
      - application/json
      description: Retrieves all courses based on the provided query parameters.
      parameters:
      - description: Course ID
        in: query
        name: courseID
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language ID
        in: query
        name: pLanguageID
        type: string
      - description: Course Title
        in: query
        name: title
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Courses
      tags:
      - Courses
  /private/language/:
    get:
      consumes:
      - application/json
      description: Retrieves all languages based on the provided query parameters.
      parameters:
      - description: Language ID
        in: query
        name: id
        type: string
      - description: Value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Languages
      tags:
      - Language
  /private/programmingLanguages/:
    get:
      consumes:
      - application/json
      description: Retrieves all Programming languages based on the provided query
        parameters.
      parameters:
      - description: Programming Language ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Programming Languages
      tags:
      - Programming Language
  /private/rewards/:
    get:
      consumes:
      - application/json
      description: Retrieves all rewards based on the provided query parameters.
      parameters:
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Rewards
      tags:
      - Reward
  /private/user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves users profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get User Profile
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Updates users profile.
      parameters:
      - description: New User Profile
        in: body
        name: newUserProfile
        required: true
        schema:
          $ref: '#/definitions/dto.UserProfileUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update User Profile
      tags:
      - User
  /public/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - Auth
  /public/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Logout
      tags:
      - Auth
  /public/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Register
      tags:
      - Auth
  /public/wallet:
    post:
      consumes:
      - application/json
      description: Auth Wallet
      parameters:
      - description: Wallet
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthWallet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Auth Wallet
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
