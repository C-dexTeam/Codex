basePath: /api/v1
definitions:
  dto.AddAttributeDTO:
    properties:
      rewardID:
        type: string
      traitType:
        maxLength: 30
        type: string
      value:
        maxLength: 30
        type: string
    required:
    - traitType
    - value
    type: object
  dto.AddChapterDTO:
    properties:
      active:
        type: boolean
      checkTemplate:
        type: string
      content:
        type: string
      courseID:
        type: string
      description:
        type: string
      dockerTemplate:
        type: string
      frontendTemplate:
        type: string
      fundName:
        type: string
      grantsExperience:
        type: boolean
      languageID:
        type: string
      rewardAmount:
        minimum: 1
        type: integer
      rewardID:
        type: string
      title:
        type: string
    type: object
  dto.AddCourseDTO:
    properties:
      description:
        type: string
      imagePath:
        type: string
      languageID:
        type: string
      programmingLanguageID:
        type: string
      rewardAmount:
        minimum: 1
        type: integer
      rewardID:
        type: string
      title:
        maxLength: 60
        type: string
    required:
    - programmingLanguageID
    - title
    type: object
  dto.AddPLanguageDTO:
    properties:
      compileCMD:
        type: string
      description:
        type: string
      downloadCMD:
        type: string
      fileExtention:
        maxLength: 30
        type: string
      imagePath:
        maxLength: 60
        type: string
      languageID:
        type: string
      monacoEditor:
        maxLength: 30
        type: string
      name:
        maxLength: 30
        type: string
    required:
    - fileExtention
    - imagePath
    - monacoEditor
    - name
    type: object
  dto.AddRewardDTO:
    properties:
      Description:
        type: string
      imagePath:
        maxLength: 60
        type: string
      name:
        maxLength: 30
        type: string
      rewardType:
        maxLength: 30
        type: string
      symbol:
        maxLength: 30
        type: string
      uri:
        maxLength: 120
        type: string
    required:
    - imagePath
    - name
    - rewardType
    - symbol
    - uri
    type: object
  dto.UpdateAttributeDTO:
    properties:
      id:
        type: string
      rewardID:
        type: string
      traitType:
        maxLength: 30
        type: string
      value:
        maxLength: 30
        type: string
    type: object
  dto.UpdateChapterDTO:
    properties:
      active:
        type: boolean
      checkTemplate:
        type: string
      content:
        type: string
      courseID:
        type: string
      description:
        type: string
      dockerTemplate:
        type: string
      frontendTemplate:
        type: string
      fundName:
        type: string
      grantsExperience:
        type: boolean
      id:
        type: string
      languageID:
        type: string
      rewardAmount:
        minimum: 1
        type: integer
      rewardID:
        type: string
      title:
        type: string
    type: object
  dto.UpdateCourseDTO:
    properties:
      description:
        type: string
      id:
        type: string
      imagePath:
        type: string
      languageID:
        type: string
      programmingLanguageID:
        type: string
      rewardAmount:
        minimum: 1
        type: integer
      rewardID:
        type: string
      title:
        maxLength: 60
        type: string
    type: object
  dto.UpdatePLanguageDTO:
    properties:
      compileCMD:
        type: string
      description:
        type: string
      downloadCMD:
        type: string
      fileExtention:
        type: string
      id:
        type: string
      imagePath:
        type: string
      languageID:
        type: string
      monacoEditor:
        type: string
      name:
        type: string
    type: object
  dto.UpdateRewardDTO:
    properties:
      Description:
        type: string
      id:
        type: string
      imagePath:
        maxLength: 60
        type: string
      name:
        maxLength: 30
        type: string
      rewardType:
        maxLength: 30
        type: string
      symbol:
        maxLength: 30
        type: string
      uri:
        maxLength: 120
        type: string
    required:
    - id
    type: object
  dto.UserAuthWallet:
    properties:
      message:
        type: string
      publicKeyBase58:
        type: string
      signatureBase58:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.UserProfileUpdateDTO:
    properties:
      name:
        maxLength: 30
        type: string
      surname:
        maxLength: 30
        type: string
    type: object
  dto.UserRegisterDTO:
    properties:
      ConfirmPassword:
        minLength: 8
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - ConfirmPassword
    - email
    - password
    - username
    type: object
  response.BaseResponse:
    properties:
      data: {}
      dataCount:
        type: integer
      errors: {}
      message:
        type: string
      statusCode:
        type: integer
    type: object
host: localhost
info:
  contact: {}
  description: API Service for Codex
  title: API Service
paths:
  /private/admin/attributes/:
    delete:
      consumes:
      - application/json
      description: Delete Attributes from DB.
      parameters:
      - description: Attribute ID
        in: query
        name: attributeID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Attribute
      tags:
      - Attribute
    patch:
      consumes:
      - application/json
      description: Updates Attribute Into DB.
      parameters:
      - description: Update Attribute
        in: body
        name: updateAttribute
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAttributeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Attribute
      tags:
      - Attribute
    post:
      consumes:
      - application/json
      description: Adds Attribute Into DB.
      parameters:
      - description: New Attribute
        in: body
        name: newAttribute
        required: true
        schema:
          $ref: '#/definitions/dto.AddAttributeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Attribute
      tags:
      - Attribute
  /private/admin/chapters/:
    patch:
      consumes:
      - application/json
      description: Updates Chapter Into DB.
      parameters:
      - description: Update Chapters
        in: body
        name: updateChapter
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateChapterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Chapter
      tags:
      - Chapters
    post:
      consumes:
      - application/json
      description: Adds Chapter Into DB.
      parameters:
      - description: New Chapter
        in: body
        name: newChapter
        required: true
        schema:
          $ref: '#/definitions/dto.AddChapterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Chapter
      tags:
      - Chapters
  /private/admin/chapters/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Chapters from DB.
      parameters:
      - description: Chapter ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Chapter
      tags:
      - Chapters
  /private/admin/courses/:
    patch:
      consumes:
      - application/json
      description: Updates Course Into DB.
      parameters:
      - description: Update Course
        in: body
        name: updateCourse
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCourseDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Course
      tags:
      - Courses
    post:
      consumes:
      - application/json
      description: Adds Course Into DB.
      parameters:
      - description: New Course
        in: body
        name: newCourse
        required: true
        schema:
          $ref: '#/definitions/dto.AddCourseDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Course
      tags:
      - Courses
  /private/admin/courses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Courses from DB.
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Course
      tags:
      - Courses
  /private/admin/planguages/:
    delete:
      consumes:
      - application/json
      description: Delete Programming Languages from DB.
      parameters:
      - description: Programming Language ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Programming Language
      tags:
      - Programming Language
    patch:
      consumes:
      - application/json
      description: Updates Programming Language Into DB.
      parameters:
      - description: Update Programming Language
        in: body
        name: updatePLanguage
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePLanguageDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Programming Language
      tags:
      - Programming Language
    post:
      consumes:
      - application/json
      description: Adds Programming Language Into DB.
      parameters:
      - description: New Programming Language
        in: body
        name: newPLanguage
        required: true
        schema:
          $ref: '#/definitions/dto.AddPLanguageDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Programming Language
      tags:
      - Programming Language
  /private/admin/rewards/:
    patch:
      consumes:
      - application/json
      description: Updates Reward Into DB.
      parameters:
      - description: Update Reward
        in: body
        name: updateReward
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRewardDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update Reward
      tags:
      - Reward
    post:
      consumes:
      - application/json
      description: Adds Reward Into DB.
      parameters:
      - description: New Reward
        in: body
        name: newReward
        required: true
        schema:
          $ref: '#/definitions/dto.AddRewardDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add Reward
      tags:
      - Reward
  /private/admin/rewards/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Rewards from DB.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete Reward
      tags:
      - Reward
  /private/admin/user:
    get:
      consumes:
      - application/json
      description: Retrieves all logs based on the provided query parameters.
      parameters:
      - description: User ID
        in: query
        name: id
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: User's Email
        in: query
        name: email
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Users
      tags:
      - Admin
  /private/attributes/:
    get:
      consumes:
      - application/json
      description: Retrieves all attribute based on the provided query parameters.
      parameters:
      - description: Attribute ID
        in: query
        name: id
        type: string
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: TraitType of Attribute
        in: query
        name: traitType
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Attributes
      tags:
      - Attribute
  /private/chapters/:
    get:
      consumes:
      - application/json
      description: Retrieves all chapters based on the provided query parameters.
      parameters:
      - description: Chapter ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Course ID
        in: query
        name: courseID
        type: string
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: Chapter Title
        in: query
        name: title
        type: string
      - description: Grants Experience
        in: query
        name: grantsExp
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Chapters
      tags:
      - Chapters
  /private/courses/:
    get:
      consumes:
      - application/json
      description: Retrieves all courses based on the provided query parameters.
      parameters:
      - description: Course ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language ID
        in: query
        name: pLanguageID
        type: string
      - description: Course Title
        in: query
        name: title
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Courses
      tags:
      - Courses
  /private/courses/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one course.
      parameters:
      - description: Course ID
        in: path
        name: id
        type: string
      - description: Chapter Page
        in: query
        name: page
        type: string
      - description: Chapter Attribute Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Course By ID
      tags:
      - Courses
  /private/language/:
    get:
      consumes:
      - application/json
      description: Retrieves all languages based on the provided query parameters.
      parameters:
      - description: Language ID
        in: query
        name: id
        type: string
      - description: Value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Languages
      tags:
      - Language
  /private/planguages/:
    get:
      consumes:
      - application/json
      description: Retrieves all Programming languages based on the provided query
        parameters.
      parameters:
      - description: Programming Language ID
        in: query
        name: id
        type: string
      - description: Language ID
        in: query
        name: languageID
        type: string
      - description: Programming Language Name
        in: query
        name: name
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Programming Languages
      tags:
      - Programming Language
  /private/planguages/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves spesific Programming languages based on the provided
        query parameters.
      parameters:
      - description: Programming Language ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get One Programming Language By ID
      tags:
      - Programming Language
  /private/rewards/:
    get:
      consumes:
      - application/json
      description: Retrieves all rewards based on the provided query parameters.
      parameters:
      - description: Reward ID
        in: query
        name: rewardID
        type: string
      - description: Reward Name
        in: query
        name: name
        type: string
      - description: Reward Symbol
        in: query
        name: symbol
        type: string
      - description: Reward Type
        in: query
        name: rewardType
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get All Rewards
      tags:
      - Reward
  /private/rewards/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one reward.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      - description: Reward Attribute Page
        in: query
        name: page
        type: string
      - description: Reward Attribute Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Reward By ID
      tags:
      - Reward
  /private/user/profile:
    get:
      consumes:
      - application/json
      description: Retrieves users profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get User Profile
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Updates users profile.
      parameters:
      - description: New User Profile
        in: body
        name: newUserProfile
        required: true
        schema:
          $ref: '#/definitions/dto.UserProfileUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update User Profile
      tags:
      - User
  /public/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - Auth
  /public/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Logout
      tags:
      - Auth
  /public/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Register
      tags:
      - Auth
  /public/rewards/metadata/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves one reward.
      parameters:
      - description: Reward ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Reward By ID
      tags:
      - Metadata
  /public/wallet:
    post:
      consumes:
      - application/json
      description: Auth Wallet
      parameters:
      - description: Wallet
        in: body
        name: wallet
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthWallet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Auth Wallet
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
